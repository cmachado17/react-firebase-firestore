{"version":3,"sources":["firebase.js","components/LinkForm.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","LinkForm","props","initialStateValues","url","name","description","useState","values","setValues","handleInputChange","e","target","value","getLinkById","id","a","collection","doc","get","console","log","data","useEffect","currentId","className","onSubmit","preventDefault","addOrEditLink","type","placeholder","onChange","row","Links","links","setLinks","setCurrentId","linkObject","set","toast","update","onDeleteLink","window","confirm","delete","autoClose","getLinks","onSnapshot","querySnapshot","docs","forEach","push","map","link","key","onClick","href","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAgBeA,G,MAFFC,IAASC,cAVD,CACjBC,OAAQ,0CACRC,WAAY,4CACZC,YAAa,mDACbC,UAAW,4BACXC,cAAe,wCACfC,kBAAmB,eACnBC,MAAO,8CAKYC,aCwERC,EApFE,SAACC,GAChB,IAAMC,EAAqB,CACzBC,IAAK,GACLC,KAAM,GACNC,YAAa,IAJW,EAOEC,mBAASJ,GAPX,mBAOnBK,EAPmB,KAOXC,EAPW,KASpBC,EAAoB,SAACC,GAAO,IAAD,EACPA,EAAEC,OAAlBP,EADuB,EACvBA,KAAMQ,EADiB,EACjBA,MACdJ,EAAU,2BAAKD,GAAN,kBAAeH,EAAOQ,MAY3BC,EAAW,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACC1B,EAAG2B,WAAW,SAASC,IAAIH,GAAII,MADhC,OACXD,EADW,OAEhBE,QAAQC,IAAIH,EAAII,QAChBb,EAAU,eAAIS,EAAII,SAHF,2CAAH,sDAcjB,OARAC,qBAAU,WACgB,KAApBrB,EAAMsB,UACNf,EAAU,eAAIN,IAEdW,EAAYZ,EAAMsB,aAEtB,CAACtB,EAAMsB,YAGP,0BAAMC,UAAU,iBAAiBC,SAvBd,SAACf,GACpBA,EAAEgB,iBAEFzB,EAAM0B,cAAcpB,GACpBC,EAAU,eAAIN,MAoBZ,yBAAKsB,UAAU,0BACb,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,kBAAb,gBAEF,2BACEI,KAAK,OACLJ,UAAU,eACVK,YAAY,sBACZzB,KAAK,MACL0B,SAAUrB,EACVG,MAAOL,EAAOJ,OAGlB,yBAAKqB,UAAU,0BACb,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,kBAAb,WAEF,2BACEI,KAAK,OACLJ,UAAU,eACVpB,KAAK,OACLyB,YAAY,eACZC,SAAUrB,EACVG,MAAOL,EAAOH,QAIlB,yBAAKoB,UAAU,cACb,8BACEpB,KAAK,cACL2B,IAAI,IACJP,UAAU,eACVK,YAAY,sBACZC,SAAUrB,EACVG,MAAOL,EAAOF,eAIlB,4BAAQmB,UAAU,6BACO,KAApBvB,EAAMsB,UAAmB,OAAS,Y,OCI9BS,EAjFD,WAAO,IAAD,EACQ1B,mBAAS,IADjB,mBACX2B,EADW,KACJC,EADI,OAEgB5B,mBAAS,IAFzB,mBAEXiB,EAFW,KAEAY,EAFA,KAIZR,EAAa,uCAAG,WAAOS,GAAP,SAAArB,EAAA,yDACF,KAAdQ,EADgB,gCAEVlC,EAAG2B,WAAW,SAASC,MAAMoB,IAAID,GAFvB,OAGhBE,YAAM,iBAAkB,CACtBV,KAAM,YAJQ,sCAOVvC,EAAG2B,WAAW,SAASC,IAAIM,GAAWgB,OAAOH,GAPnC,OAQhBE,YAAM,eAAgB,CAClBV,KAAM,YATM,2CAAH,sDAcbY,EAAY,uCAAG,WAAO1B,GAAP,SAAAC,EAAA,0DACf0B,OAAOC,QAAQ,8CADA,gCAEXrD,EAAG2B,WAAW,SAASC,IAAIH,GAAI6B,SAFpB,OAGjBL,YAAM,eAAgB,CACpBV,KAAM,QACNgB,UAAW,MALI,2CAAH,sDAUZC,EAAQ,uCAAG,sBAAA9B,EAAA,sDACf1B,EAAG2B,WAAW,SAAS8B,YAAW,SAACC,GACjC,IAAMC,EAAO,GACbD,EAAcE,SAAQ,SAAChC,GACrB+B,EAAKE,KAAL,2BAAejC,EAAII,QAAnB,IAA2BP,GAAIG,EAAIH,SAErCoB,EAASc,MANI,2CAAH,qDAcd,OAJA1B,qBAAU,WACRuB,MACC,IAGD,6BACE,yBAAKrB,UAAU,gBACb,kBAAC,EAAa,CAACG,gBAAeJ,YAAWU,WAG3C,yBAAKT,UAAU,gBACZS,EAAMkB,KAAI,SAACC,GAAD,OACT,yBAAK5B,UAAU,YAAY6B,IAAKD,EAAKtC,IACnC,yBAAKU,UAAU,aACb,yBAAKA,UAAU,kCACb,4BAAK4B,EAAKhD,MACV,6BACE,uBACEoB,UAAU,8BACV8B,QAAS,kBAAMnB,EAAaiB,EAAKtC,MAFnC,UAMA,uBACEU,UAAU,6BACV8B,QAAS,kBAAMd,EAAaY,EAAKtC,MAFnC,WAQJ,2BAAIsC,EAAK/C,aACT,uBAAGkD,KAAMH,EAAKjD,IAAKqD,IAAI,uBAAvB,yB,MCxDCC,MAbf,WAEE,OACE,yBAAKjC,UAAU,iBACb,yBAAKA,UAAU,OAEb,kBAAC,EAAD,OAEF,kBAAC,IAAD,QCFckC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.6b470b6d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore'\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyChqE8Nnm5OdaDGhPShs2esi2jZHIGDdv0\",\r\n    authDomain: \"react-firebase-crud-638e2.firebaseapp.com\",\r\n    databaseURL: \"https://react-firebase-crud-638e2.firebaseio.com\",\r\n    projectId: \"react-firebase-crud-638e2\",\r\n    storageBucket: \"react-firebase-crud-638e2.appspot.com\",\r\n    messagingSenderId: \"328920011934\",\r\n    appId: \"1:328920011934:web:0d125ef0e026ce6033978f\"\r\n  };\r\n  // Initialize Firebase\r\n  const fb = firebase.initializeApp(firebaseConfig);\r\n\r\n  export const db = fb.firestore();\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\n\r\n\r\nconst LinkForm = (props) => {\r\n  const initialStateValues = {\r\n    url: \"\",\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const [values, setValues] = useState(initialStateValues);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n   \r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    props.addOrEditLink(values);\r\n    setValues({...initialStateValues})\r\n   \r\n  };\r\n\r\n  const getLinkById = async(id) =>{\r\n     const doc = await db.collection('links').doc(id).get();\r\n      console.log(doc.data());\r\n      setValues({...doc.data()})\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if (props.currentId === ''){\r\n        setValues({...initialStateValues});\r\n    }else{\r\n        getLinkById(props.currentId);\r\n    }\r\n  },[props.currentId]);\r\n\r\n  return (\r\n    <form className=\"card card-body\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group input-group\">\r\n        <div className=\"input-group-text bg-light\">\r\n          <i className=\"material-icons\">insert_link</i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"https://someurl.com\"\r\n          name=\"url\"\r\n          onChange={handleInputChange}\r\n          value={values.url}\r\n        />\r\n      </div>\r\n      <div className=\"form-group input-group\">\r\n        <div className=\"input-group-text bg-light\">\r\n          <i className=\"material-icons\">create</i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          name=\"name\"\r\n          placeholder=\"website name\"\r\n          onChange={handleInputChange}\r\n          value={values.name}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <textarea\r\n          name=\"description\"\r\n          row=\"3\"\r\n          className=\"form-control\"\r\n          placeholder=\"write a description\"\r\n          onChange={handleInputChange}\r\n          value={values.description}\r\n        />\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary btn-block\">\r\n          {props.currentId === '' ? 'Save' : 'Update'}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LinkForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport LinkForm from \"./LinkForm\";\r\nimport { db } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Links = () => {\r\n  const [links, setLinks] = useState([]);\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n\r\n  const addOrEditLink = async (linkObject) => {\r\n    if (currentId === ''){\r\n        await db.collection(\"links\").doc().set(linkObject);\r\n        toast(\"New Link added\", {\r\n          type: \"success\",\r\n        });\r\n    }else{\r\n        await db.collection('links').doc(currentId).update(linkObject);\r\n        toast(\"Link Updated\", {\r\n            type: \"success\",\r\n          });\r\n    }\r\n  };\r\n\r\n  const onDeleteLink = async (id) => {\r\n    if (window.confirm(\"are you sure you want to delete this link?\")) {\r\n      await db.collection(\"links\").doc(id).delete();\r\n      toast(\"Link deleted\", {\r\n        type: \"error\",\r\n        autoClose: 2000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const getLinks = async () => {\r\n    db.collection(\"links\").onSnapshot((querySnapshot) => {\r\n      const docs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        docs.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setLinks(docs);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLinks();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"col-md-4 p-2\">\r\n        <LinkForm {...{addOrEditLink, currentId, links}} />\r\n      </div>\r\n\r\n      <div className=\"col-md-8 p-2\">\r\n        {links.map((link) => (\r\n          <div className=\"card mb-1\" key={link.id}>\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4>{link.name}</h4>\r\n                <div>\r\n                  <i\r\n                    className=\"material-icons text-success\"\r\n                    onClick={() => setCurrentId(link.id)}\r\n                  >\r\n                    create\r\n                  </i>\r\n                  <i\r\n                    className=\"material-icons text-danger\"\r\n                    onClick={() => onDeleteLink(link.id)}\r\n                  >\r\n                    close\r\n                  </i>\r\n                </div>\r\n              </div>\r\n              <p>{link.description}</p>\r\n              <a href={link.url} rel=\"noopener noreferrer\">\r\n                Go to website\r\n              </a>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Links;\r\n","import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport Links from \"./components/Links\";\nimport { ToastContainer, toast } from 'react-toastify';\n  import 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n\n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n       \n        <Links />\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './firebase';\nimport 'bootswatch/dist/superhero/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}